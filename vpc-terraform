There are several considerations to be made for building a VPC for any project.

The components required for a basic target VPC design that consists of the following:

VPC in AWS regioen(ap-south-1)
1 Internet Gateway
3 Public Subnets, one in each AZ
3 Private Subnets, one in each AZ
Route Table configurations (main and 2nd)
  
A VPC spans all the Availability Zones (AZ) in a region. It is always associated with a CIDR range (both IPv4 and IPv6) which defines the number of internal network addresses that may be used internally.

Within the VPC, we create subnets that are specific to AZs. It is possible to have multiple subnets in the same AZ. The purpose of subnets is to internally segregate resources contained in the VPC in every AZ. AWS Regions consist of multiple Availability Zones for DR purposes.

When a VPC is created, a corresponding Route Table is also created, which defines a default route that lets the components in the VPC communicate with each other internally. The route table thus created is called the main route table.

Our architecture contains two types of subnets – public and private. Public subnets enable internet access for the components hosted within them, while private subnets don’t. Routes in the route tables drive the decision to enable or disable internet access. When a subnet is associated with a route table that allows internet access, it is called a public subnet. Whereas the subnet associated with the route table that does not allow internet access is called private subnet.

An internet gateway is deployed and associated with the VPC to enable internet traffic within the VPC’s public subnets. Only one internet gateway can be associated with each VPC. Owing to this, and the fact that there is usually a default internet address (0.0.0.0/0) pointing to the internet gateway, as a best practice, it is recommended to create a second route table.

Thus apart from the main route table, our architecture consists of a second route table to which public subnets are associated.


resource "aws_vpc" "main" {
    cidr_block = "10.0.0.0/16"

    tags = {
        Name = "vpc-terraform"
    }
}

variable "public_subnet_cidrs" {
    type = list(string)
    description = "public subnet CIDR values"
    default = ["10.0.1.0/24", "10.0.2.0/24", "10.0.3.0/24"]
}

variable "private_subnet_cidrs" {
    type = list(string)
    description = "private subnet CIDR values"
    default = ["10.0.4.0/24", "10.0.5.0/24", "10.0.6.0/24"]
}

variable "azs" {
 type        = list(string)
 description = "Availability Zones"
 default     = ["ap-south-1a", "ap-south-1b", "ap-south-1c"]
}

resource "aws_subnet" "public_subnets" {
 count             = length(var.public_subnet_cidrs)
 vpc_id            = aws_vpc.main.id
 cidr_block        = element(var.public_subnet_cidrs, count.index)
 availability_zone = element(var.azs, count.index)
 
 tags = {
   Name = "Public Subnet ${count.index + 1}"
 }
}
 
resource "aws_subnet" "private_subnets" {
 count             = length(var.private_subnet_cidrs)
 vpc_id            = aws_vpc.main.id
 cidr_block        = element(var.private_subnet_cidrs, count.index)
 availability_zone = element(var.azs, count.index)
 
 tags = {
   Name = "Private Subnet ${count.index + 1}"
 }
}

resource "aws_internet_gateway" "gw" {
 vpc_id = aws_vpc.main.id
 
 tags = {
   Name = "VPC-terraform-IG"
 }
}

resource "aws_route_table" "second_rt" {
 vpc_id = aws_vpc.main.id
 
 route {
   cidr_block = "0.0.0.0/0"
   gateway_id = aws_internet_gateway.gw.id
 }
 
 tags = {
   Name = "VPC-terraform-RT-2"
 }
}

resource "aws_route_table_association" "public_subnet_asso" {
 count = length(var.public_subnet_cidrs)
 subnet_id      = element(aws_subnet.public_subnets[*].id, count.index)
 route_table_id = aws_route_table.second_rt.id
}



1) Create a VPC:
To begin with, defining VPC resource in Terraform. 
To specify a range of IP addresses in a VPC, a CIDR block needs to be provided.
We need to provide a Name tag for identification.

resource "aws_vpc" "main" {
 cidr_block = "10.0.0.0/16"
 
 tags = {
   Name = "Project VPC"
 }
}

Applying this configuration, since we are creating a VPC – a main Route table, and main Network ACL is also created. 
The VPC is also associated with a pre-existing DHCP option set. 

2) Create Subnets:
The VPC exists in all avilability zonesin a regioen.
Subnets are associated with only a single avilability zone.

Tha mumbai(south-ap-1) regien has one avilability zone, and we need to create private and public subnets as per requirement.
We have to identify the CIDR ranges to be associated with the new subnetswe need to create.

Example: Based on CIDR range of the VPC, I have mentioned the CIDR ranges and defined variables in the terraform code.
The two variables represent different lists of CIDR ranges for public and private subnets.

variable "public_subnet_cidrs" {
    type = list(string)
    description = "public subnet CIDR values"
    default = ["10.0.1.0/24", "10.0.2.0/24", "10.0.3.0/24"]
}

variable "private_subnet_cidrs" {
    type = list(string)
    description = "private subnet CIDR values"
    default = ["10.0.4.0/24", "10.0.5.0/24", "10.0.6.0/24"]
}


We need to write configuration for subnets. The resources should be defined for public and private subnets.
Creating seperate resources for public and private subnets gives us the flexibility to manage them in terraform.  
We have the created a corresponding number of subnets. 

*
The below configuration is written only for subnets to be created in a single avilability zone.

resource "aws_subnet" "public_subnets" {
 count      = length(var.public_subnet_cidrs)
 vpc_id     = aws_vpc.main.id
 cidr_block = element(var.public_subnet_cidrs, count.index)
 
 tags = {
   Name = "Public Subnet ${count.index + 1}"
 }
}
 
resource "aws_subnet" "private_subnets" {
 count      = length(var.private_subnet_cidrs)  
 vpc_id     = aws_vpc.main.id
 cidr_block = element(var.private_subnet_cidrs, count.index)
 
 tags = {
   Name = "Private Subnet ${count.index + 1}"
 }
}

We can also have the all subnets in same avilability zones and also we can create them differnt avilability zones.
We need to create variable to store the list of avilability zones.

variable "azs" {
 type        = list(string)
 description = "Availability Zones"
 default     = ["ap-south-1a", "ap-south-1b", "ap-south-1c"]
}

resource "aws_subnet" "public_subnets" {
 count             = length(var.public_subnet_cidrs)
 vpc_id            = aws_vpc.main.id
 cidr_block        = element(var.public_subnet_cidrs, count.index)
 availability_zone = element(var.azs, count.index)
 
 tags = {
   Name = "Public Subnet ${count.index + 1}"
 }
}
 
resource "aws_subnet" "private_subnets" {
 count             = length(var.private_subnet_cidrs)
 vpc_id            = aws_vpc.main.id
 cidr_block        = element(var.private_subnet_cidrs, count.index)
 availability_zone = element(var.azs, count.index)
  tags = {
   Name = "Private Subnet ${count.index + 1}"
 }
}


3) Set up Internet Gateway:
We need internet gateway to provide access to the internet for the VPC since we have built the public subnets.

We have already associated this IG with the VPC we created beforeby specifying the VPc id attributes.

resource "aws_internet_gateway" "gw" {
 vpc_id = aws_vpc.main.id
 
 tags = {
   Name = "VPC-terraform-IG"
 }
}


4) Create a second Route table:
When VPC is created a main route table is created as well. The main route table is responsible for the enabling the flow of traffic with in the VPC.
In the main route table there is no explicit association(belong to the same VPC as route table, but are associated with the any route table) of any subnet. All the subnets are associated implicitly.

As we have creeated Public subnets and Private subnets, they are all private. We need to make the Public subnets as public. We need to create routes using IGW(Internet Gateway) which enables the traffic from the internet to access these subnets.
We create a second route table and associate with same VPC.

*We have also specified the route to the internet (0.0.0.0/0) using the IGW(Internet gateway).

resource "aws_route_table" "second_rt" {
 vpc_id = aws_vpc.main.id
 
 route {
   cidr_block = "0.0.0.0/0"
   gateway_id = aws_internet_gateway.gw.id
 }
 
 tags = {
   Name = "VPC-terraform-RT-2"
 }
}


5) Associate Public Subnets with the Second Route Table:

The subnets association for the second route table is similar to the main route table, but no subnets are explicitly associated in the second route table. So the subnets follow the main route table.
We need to explicitly associate all the Public subnets with the second route table to enble the internet access. 

resource "aws_route_table_association" "public_subnet_asso" {
 count = length(var.public_subnet_cidrs)
 subnet_id      = element(aws_subnet.public_subnets[*].id, count.index)
 route_table_id = aws_route_table.second_rt.id
}

We rely on the length property of public_subnets_cidrs variable to create the associations. We have 3 public subnets the above congiguration creates 3 coressponding association of subnets and the second route table.

After the configuration we will have the explicitly associated public subnets with the second route table, which has route to via the IGW. From the main route table the public subnets association is automatically removed.
